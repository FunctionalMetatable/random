/* I'm making this a whole on script now :D */

/* First up, load dependencies */
function loadDependencies() {
  /* md5.min.js */
  if (!document.getElementById("imguploader-md5")) {
    var md5s = document.createElement("script");
    md5s.src = "https://raw.githubusercontent.com/emn178/js-md5/master/build/md5.min.js";
    md5s.id = "imguploader-md5";
    md5s.type = "text/javascript";
    document.body.appendChild(md5s)
  };
  /* jquery.min.js */
  if (!document.getElementById("imguploader-jquery")) {
    var jquerys = document.createElement("script");
    jquerys.src = "https://code.jquery.com/jquery-3.6.0.min.js";
    jquerys.id = "imguploader-jquery";
    jquerys.type = "text/javascript";
    document.body.appendChild(jquerys)
  }; 
};

loadDependencies();

function uploaderError(uploader, message) {
  alert(`[${uploader}]: ${message}`);
  throw message
};

async function uploadToAssets(image, extension) {
  var hash = md5(image);
  try {
    var res = await fetch("https://assets.scratch.mit.edu/" + hash + "." + extension, {
      body: image,
      method: "POST",
      mode: "cors",
      credentials: "include"
    });
    
    var json = await res.json();
    if (json.status == "ok") {
      finish("https://assets.scratch.mit.edu/get_image/\x2e\x25\x32\x45/" + json["content-name"])
    } else {
      uploaderError("assets", "Looks like the server didn't accept your image. Are you even logged in? \n Please try a smaller image.")
    }
  } catch {
    uploaderError("assets", "The image can't upload!")
  }
};

async function uploadToCDN2(image, extension) {
    function getCookie(name) {
        var value = "; " + document.cookie;
        var parts = value.split("; " + name + "=");
        if (parts.length == 2)
            return parts.pop().split(";").shift();
    }

    function deleteProject(projectId) {
        fetch(`https://scratch.mit.edu/site-api/projects/all/${projectId}/`, {
            "headers": {
                "accept": "application/json, text/javascript, */*; q=0.01",
                "accept-language": "en-US,en;q=0.9",
                "content-type": "application/json",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "x-csrftoken": getCookie('scratchcsrftoken'),
                "x-requested-with": "XMLHttpRequest"
            },
            "referrer": "https://scratch.mit.edu/mystuff/",
            "referrerPolicy": "no-referrer-when-downgrade",
            "body": `{\"view_count\":0,\"favorite_count\":0,\"remixers_count\":0,\"creator\":{\"username\":\"Scratch\",\"pk\":53088961,\"thumbnail_url\":\"//uploads.scratch.mit.edu/users/avatars/default.png\",\"admin\":false},\"title\":\"Forums Image Uploader Autogenerated Project\",\"isPublished\":false,\"datetime_created\":\"2020-07-24T10:27:23\",\"thumbnail_url\":\"//uploads.scratch.mit.edu/projects/thumbnails/413641266.png\",\"visibility\":\"trshbyusr\",\"love_count\":0,\"datetime_modified\":\"2020-07-24T10:27:24\",\"uncached_thumbnail_url\":\"//cdn2.scratch.mit.edu/get_image/project/413641266_100x80.png\",\"thumbnail\":\"413641266.png\",\"datetime_shared\":null,\"commenters_count\":0,\"id\":413641266}`,
            "method": "PUT",
            "mode": "cors",
            "credentials": "include"
        })
    }

    async function upload(img) {
        var session = await fetch("https://scratch.mit.edu/session/", {
            credentials: "same-origin",
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        }).catch(err => {
            uploaderError("cdn2", "We can't get authorisation! Are you even logged in?")

        });
        var sessionJSON = await session.json();
        var token = sessionJSON.user.token;
        fetch("https://projects.scratch.mit.edu/", {
                "headers": {
                    "accept": "*/*",
                    "accept-language": "en-US,en;q=0.9",
                    "content-type": "application/json",
                    "sec-fetch-dest": "empty",
                    "sec-fetch-mode": "cors",
                    "sec-fetch-site": "same-site"
                },
                "referrer": "https://scratch.mit.edu/projects/editor",
                "referrerPolicy": "no-referrer-when-downgrade",
                "body": "{\"targets\":[{\"isStage\":true,\"name\":\"Stage\",\"variables\":{\"`jEk@4|i[#Fk" +
                    "?(8x)AV.-my variable\":[\"my variable\",0]},\"lists\":{},\"broadcasts\":{},\"blo" +
                    "cks\":{},\"comments\":{},\"currentCostume\":0,\"costumes\":[{\"assetId\":\"77582" +
                    "e3881becdac32ffd151dbb31f14\",\"name\":\"backdrop1\",\"bitmapResolution\":1,\"md" +
                    "5ext\":\"77582e3881becdac32ffd151dbb31f14.svg\",\"dataFormat\":\"svg\",\"rotatio" +
                    "nCenterX\":381.96246447447436,\"rotationCenterY\":351.7889839939939}],\"sounds\"" +
                    ":[],\"volume\":100,\"layerOrder\":0,\"tempo\":60,\"videoTransparency\":50,\"vide" +
                    "oState\":\"on\",\"textToSpeechLanguage\":null}],\"monitors\":[],\"extensions\":[" +
                    "],\"meta\":{\"semver\":\"3.0.0\",\"vm\":\"0.2.0-prerelease.20200720182258\",\"ag" +
                    "ent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, lik" +
                    "e Gecko) Chrome/84.0.4147.89 Safari/537.36\"}}",
                "method": "POST",
                "mode": "cors",
                "credentials": "include"
            }).catch(err => {
                uploaderError("cdn2", "my code is broken :(")
            })
            .then(e => e.json())
            .then(data => {
                console.log("Created Project!");
                console.log(data);
                /* Set the Title for project */
                fetch(`https://api.scratch.mit.edu/projects/${data["content-name"]}`, {
                    "headers": {
                        "accept": "application/json",
                        "accept-language": "en-US,en;q=0.9",
                        "content-type": "application/json",
                        "sec-fetch-dest": "empty",
                        "sec-fetch-mode": "cors",
                        "sec-fetch-site": "same-site",
                        "x-token": token
                    },
                    "referrer": `https://scratch.mit.edu/projects/${data["content-name"]}/`,
                    "referrerPolicy": "no-referrer-when-downgrade",
                    "body": `{\"title\":\"Forums Image Uploader Autogenerated Project\"}`,
                    "method": "PUT",
                    "mode": "cors",
                    "credentials": "omit"
                }).catch(e => {
                    uploaderError("cdn2", "title didnt set :(");
                    throw e
                }).then(titleJSON => {
                    console.log("We successfully set the title!");
                    $.ajax({
                        type: "POST",
                        url: "/internalapi/project/thumbnail/" + data["content-name"] + "/set/",
                        data: img,
                        headers: {
                            "X-csrftoken": getCookie("scratchcsrftoken")
                        },
                        contentType: "",
                        processData: false,
                        success: function() {
                            finish(`[img]https://cdn2.scratch.mit.edu/get_image/project/${data["content-name"]}_9000x7200.png[/img]`)
                            deleteProject(data["content-name"]);
                        },
                        error: function() {
                            uploaderError("cdn2", "We can't set the project thumbnail :(");
                            deleteProject(data["content-name"]);
                        }
                    })

                })
            })
    }
};


function finish(url) {
  if (document.getElementById("id_body")) {
    document.getElementById("id_body").value += `[img]${url}[/img]`
  } else {
    prompt("We've uploaded the image successfully! Here's a link: (we cannot find a forum textbox to put it in) \n", url)
  }
};

// start the big bookmarklet

void(() => { // Make sure there is no result so the page isn't overwritten
    let messages = ["assets", "cdn2"]; // different image hosts
    var functions = {"assets": uploadToAssets, "cdn2": uploadToCDN2};
    (menuItems => {
        let d = document.createElement("div"); // make the menu div
        d.setAttribute("data-uploader-menu", "1"); // let the CSS see it exists without clashing with on-page styles
        let s = document.createElement("style"); // make a style tag
        s.textContent = "[data-uploader-menubutton]:not(:root) { outline: none; margin: 0px; border: none; " + // add the CSS
                "border-radius: 0px; background: transparent; color: inherit; font: inherit; text" +
                "-align: left; padding: 5px 10px 5px 20px; display: block; user-select: none; max" +
                "-width: 300px; overflow: visible; height: fit-content; transition: none 0s ease " +
                "0s !important; }[data-uploader-menubutton]:not(:root):hover, [data-uploader-menubutt" +
                "on]:not(:root):focus { border: none; border-radius: 0px; background: rgb(200, 20" +
                "0, 201); color: inherit; font: inherit; }[data-uploader-menubutton]:not(:root):dis" +
                "abled { color: rgb(114, 119, 124); background: transparent; cursor: default; poi" +
                "nter-events: none; }[data-uploader-menu]:not(:root) { line-height: 1.45; border: 1" +
                "px solid rgb(218, 220, 224); position: fixed; top: 0px; left: 0px; z-index: 2147" +
                "483647; min-width: 135px; background: rgb(255, 255, 255); padding: 3px 0px; disp" +
                "lay: flex; flex-direction: column; text-align: left; color: rgb(0, 0, 0); font-f" +
                "amily: system-ui, sans-serif; font-size: 13px; box-shadow: rgba(0, 0, 0, 0.557) " +
                "3px 3px 2px -2px; }[data-uploader-blockbg] { position: fixed; top: 0px; left: 0px;" +
                " width: 100%; height: 100%; z-index: 2147483647; }";
        let c = _ => [...document.querySelectorAll("[data-uploader-menu],[data-uploader-blockbg]")].map(e => e.remove()); // this is a function that closes the menu
        d.append(...menuItems.map(e => { // this part turns the menu items into button tags
            let b = document.createElement("button"); // first we make the button
            b.setAttribute("data-uploader-menubutton", "1"); // let the CSS see it exists without clashing with on-page styles
            b.textContent = e.text; // make it have the right text
            b.onclick = a => { // when it is clicked
                a.preventDefault(); // don't reload the page
                a.stopPropagation(); // don't trigger other events
                a.bubbles = false; // don't trigger other events (iirc some browsers need this)
                c(); // close the menu
                e.action() // call the menu item's function
            };
            b.disabled = !e.action; // if there's no action, disable the button
            return b
        }), s);
        d.style.margin = "10px" // make the menu not be so close to the edge
        let b = document.createElement("div"); // make a div that covers the page so we can close the menu by clicking behind it
        b.setAttribute("data-uploader-blockbg", "1"); // let the CSS see it exists without clashing with on-page styles
        b.onclick = c; // when it's clicked, close the menu
        document
            .body
            .append(b, d); // add the menu and the thing that goes behind it to the document
    })(true
        ? [
            {
                text: "Which image host would you like to use?" // this is the menu title
            },
            ...messages.map(t => ({
                text: t,
                action: e => {
                  var input=document.createElement("input");
                  input.type = "file";
                  input.accept = "image/*";
                  input.style.display = "none";
                  input.addEventListener("change", e=> {
                    var file = input.files[0];
                    var reader = new FileReader();
                    reader.readAsArrayBuffer(file);
                    reader.onloadend = function() {
                      var ext = file.name.split(".").pop().toLowerCase();
                      functions[t](reader.result, ext)
                    }
                  });
                  input.click()
                }
            }))
        ]
        : [
            {
                text: "For some reason it doesn't work :("
            }
        ]);
})()
// jeffalo is still best web dev
